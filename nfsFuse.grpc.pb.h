// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nfsFuse.proto
#ifndef GRPC_nfsFuse_2eproto__INCLUDED
#define GRPC_nfsFuse_2eproto__INCLUDED

#include "nfsFuse.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace nfsFuse {

// Interface exported by the server.
class NFSFuse final {
 public:
  static constexpr char const* service_full_name() {
    return "nfsFuse.NFSFuse";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status nfs_getattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::nfsFuse::GetAttrResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::GetAttrResponseParams>> Asyncnfs_getattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::GetAttrResponseParams>>(Asyncnfs_getattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::GetAttrResponseParams>> PrepareAsyncnfs_getattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::GetAttrResponseParams>>(PrepareAsyncnfs_getattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::nfsFuse::ReadDirResponseParams>> nfs_readdir(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::nfsFuse::ReadDirResponseParams>>(nfs_readdirRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::nfsFuse::ReadDirResponseParams>> Asyncnfs_readdir(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::nfsFuse::ReadDirResponseParams>>(Asyncnfs_readdirRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::nfsFuse::ReadDirResponseParams>> PrepareAsyncnfs_readdir(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::nfsFuse::ReadDirResponseParams>>(PrepareAsyncnfs_readdirRaw(context, request, cq));
    }
    virtual ::grpc::Status nfs_mkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::nfsFuse::VoidMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>> Asyncnfs_mkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>>(Asyncnfs_mkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>> PrepareAsyncnfs_mkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>>(PrepareAsyncnfs_mkdirRaw(context, request, cq));
    }
    virtual ::grpc::Status nfs_rmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::nfsFuse::VoidMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>> Asyncnfs_rmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>>(Asyncnfs_rmdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>> PrepareAsyncnfs_rmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>>(PrepareAsyncnfs_rmdirRaw(context, request, cq));
    }
    virtual ::grpc::Status nfs_create(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::nfsFuse::CreateResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CreateResponseParams>> Asyncnfs_create(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CreateResponseParams>>(Asyncnfs_createRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CreateResponseParams>> PrepareAsyncnfs_create(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CreateResponseParams>>(PrepareAsyncnfs_createRaw(context, request, cq));
    }
    virtual ::grpc::Status nfs_open(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::nfsFuse::OpenResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::OpenResponseParams>> Asyncnfs_open(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::OpenResponseParams>>(Asyncnfs_openRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::OpenResponseParams>> PrepareAsyncnfs_open(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::OpenResponseParams>>(PrepareAsyncnfs_openRaw(context, request, cq));
    }
    virtual ::grpc::Status nfs_read(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::nfsFuse::ReadResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::ReadResponseParams>> Asyncnfs_read(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::ReadResponseParams>>(Asyncnfs_readRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::ReadResponseParams>> PrepareAsyncnfs_read(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::ReadResponseParams>>(PrepareAsyncnfs_readRaw(context, request, cq));
    }
    virtual ::grpc::Status nfs_write(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::nfsFuse::WriteResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteResponseParams>> Asyncnfs_write(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteResponseParams>>(Asyncnfs_writeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteResponseParams>> PrepareAsyncnfs_write(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteResponseParams>>(PrepareAsyncnfs_writeRaw(context, request, cq));
    }
    virtual ::grpc::Status nfs_commit(::grpc::ClientContext* context, const ::nfsFuse::CommitRequestParams& request, ::nfsFuse::CommitResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CommitResponseParams>> Asyncnfs_commit(::grpc::ClientContext* context, const ::nfsFuse::CommitRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CommitResponseParams>>(Asyncnfs_commitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CommitResponseParams>> PrepareAsyncnfs_commit(::grpc::ClientContext* context, const ::nfsFuse::CommitRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CommitResponseParams>>(PrepareAsyncnfs_commitRaw(context, request, cq));
    }
    virtual ::grpc::Status nfs_recommit(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::nfsFuse::WriteResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteResponseParams>> Asyncnfs_recommit(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteResponseParams>>(Asyncnfs_recommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteResponseParams>> PrepareAsyncnfs_recommit(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteResponseParams>>(PrepareAsyncnfs_recommitRaw(context, request, cq));
    }
    virtual ::grpc::Status nfs_unlink(::grpc::ClientContext* context, const ::nfsFuse::UnlinkRequestParams& request, ::nfsFuse::VoidMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>> Asyncnfs_unlink(::grpc::ClientContext* context, const ::nfsFuse::UnlinkRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>>(Asyncnfs_unlinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>> PrepareAsyncnfs_unlink(::grpc::ClientContext* context, const ::nfsFuse::UnlinkRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>>(PrepareAsyncnfs_unlinkRaw(context, request, cq));
    }
    virtual ::grpc::Status nfs_mknod(::grpc::ClientContext* context, const ::nfsFuse::MknodRequestParams& request, ::nfsFuse::VoidMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>> Asyncnfs_mknod(::grpc::ClientContext* context, const ::nfsFuse::MknodRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>>(Asyncnfs_mknodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>> PrepareAsyncnfs_mknod(::grpc::ClientContext* context, const ::nfsFuse::MknodRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>>(PrepareAsyncnfs_mknodRaw(context, request, cq));
    }
    virtual ::grpc::Status nfs_rename(::grpc::ClientContext* context, const ::nfsFuse::RenameRequestParams& request, ::nfsFuse::VoidMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>> Asyncnfs_rename(::grpc::ClientContext* context, const ::nfsFuse::RenameRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>>(Asyncnfs_renameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>> PrepareAsyncnfs_rename(::grpc::ClientContext* context, const ::nfsFuse::RenameRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>>(PrepareAsyncnfs_renameRaw(context, request, cq));
    }
    virtual ::grpc::Status nfs_utimens(::grpc::ClientContext* context, const ::nfsFuse::UtimensRequestParams& request, ::nfsFuse::VoidMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>> Asyncnfs_utimens(::grpc::ClientContext* context, const ::nfsFuse::UtimensRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>>(Asyncnfs_utimensRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>> PrepareAsyncnfs_utimens(::grpc::ClientContext* context, const ::nfsFuse::UtimensRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>>(PrepareAsyncnfs_utimensRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void nfs_getattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void nfs_readdir(::grpc::ClientContext* context, ::nfsFuse::ReadDirRequestParams* request, ::grpc::experimental::ClientReadReactor< ::nfsFuse::ReadDirResponseParams>* reactor) = 0;
      virtual void nfs_mkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void nfs_rmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void nfs_create(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void nfs_open(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void nfs_read(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void nfs_write(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void nfs_commit(::grpc::ClientContext* context, const ::nfsFuse::CommitRequestParams* request, ::nfsFuse::CommitResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void nfs_recommit(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void nfs_unlink(::grpc::ClientContext* context, const ::nfsFuse::UnlinkRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void nfs_mknod(::grpc::ClientContext* context, const ::nfsFuse::MknodRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void nfs_rename(::grpc::ClientContext* context, const ::nfsFuse::RenameRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void nfs_utimens(::grpc::ClientContext* context, const ::nfsFuse::UtimensRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::GetAttrResponseParams>* Asyncnfs_getattrRaw(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::GetAttrResponseParams>* PrepareAsyncnfs_getattrRaw(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::nfsFuse::ReadDirResponseParams>* nfs_readdirRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::nfsFuse::ReadDirResponseParams>* Asyncnfs_readdirRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::nfsFuse::ReadDirResponseParams>* PrepareAsyncnfs_readdirRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>* Asyncnfs_mkdirRaw(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>* PrepareAsyncnfs_mkdirRaw(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>* Asyncnfs_rmdirRaw(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>* PrepareAsyncnfs_rmdirRaw(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CreateResponseParams>* Asyncnfs_createRaw(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CreateResponseParams>* PrepareAsyncnfs_createRaw(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::OpenResponseParams>* Asyncnfs_openRaw(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::OpenResponseParams>* PrepareAsyncnfs_openRaw(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::ReadResponseParams>* Asyncnfs_readRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::ReadResponseParams>* PrepareAsyncnfs_readRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteResponseParams>* Asyncnfs_writeRaw(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteResponseParams>* PrepareAsyncnfs_writeRaw(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CommitResponseParams>* Asyncnfs_commitRaw(::grpc::ClientContext* context, const ::nfsFuse::CommitRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CommitResponseParams>* PrepareAsyncnfs_commitRaw(::grpc::ClientContext* context, const ::nfsFuse::CommitRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteResponseParams>* Asyncnfs_recommitRaw(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteResponseParams>* PrepareAsyncnfs_recommitRaw(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>* Asyncnfs_unlinkRaw(::grpc::ClientContext* context, const ::nfsFuse::UnlinkRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>* PrepareAsyncnfs_unlinkRaw(::grpc::ClientContext* context, const ::nfsFuse::UnlinkRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>* Asyncnfs_mknodRaw(::grpc::ClientContext* context, const ::nfsFuse::MknodRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>* PrepareAsyncnfs_mknodRaw(::grpc::ClientContext* context, const ::nfsFuse::MknodRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>* Asyncnfs_renameRaw(::grpc::ClientContext* context, const ::nfsFuse::RenameRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>* PrepareAsyncnfs_renameRaw(::grpc::ClientContext* context, const ::nfsFuse::RenameRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>* Asyncnfs_utimensRaw(::grpc::ClientContext* context, const ::nfsFuse::UtimensRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>* PrepareAsyncnfs_utimensRaw(::grpc::ClientContext* context, const ::nfsFuse::UtimensRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status nfs_getattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::nfsFuse::GetAttrResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::GetAttrResponseParams>> Asyncnfs_getattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::GetAttrResponseParams>>(Asyncnfs_getattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::GetAttrResponseParams>> PrepareAsyncnfs_getattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::GetAttrResponseParams>>(PrepareAsyncnfs_getattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::nfsFuse::ReadDirResponseParams>> nfs_readdir(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::nfsFuse::ReadDirResponseParams>>(nfs_readdirRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::nfsFuse::ReadDirResponseParams>> Asyncnfs_readdir(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::nfsFuse::ReadDirResponseParams>>(Asyncnfs_readdirRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::nfsFuse::ReadDirResponseParams>> PrepareAsyncnfs_readdir(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::nfsFuse::ReadDirResponseParams>>(PrepareAsyncnfs_readdirRaw(context, request, cq));
    }
    ::grpc::Status nfs_mkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::nfsFuse::VoidMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>> Asyncnfs_mkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>>(Asyncnfs_mkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>> PrepareAsyncnfs_mkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>>(PrepareAsyncnfs_mkdirRaw(context, request, cq));
    }
    ::grpc::Status nfs_rmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::nfsFuse::VoidMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>> Asyncnfs_rmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>>(Asyncnfs_rmdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>> PrepareAsyncnfs_rmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>>(PrepareAsyncnfs_rmdirRaw(context, request, cq));
    }
    ::grpc::Status nfs_create(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::nfsFuse::CreateResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::CreateResponseParams>> Asyncnfs_create(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::CreateResponseParams>>(Asyncnfs_createRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::CreateResponseParams>> PrepareAsyncnfs_create(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::CreateResponseParams>>(PrepareAsyncnfs_createRaw(context, request, cq));
    }
    ::grpc::Status nfs_open(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::nfsFuse::OpenResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::OpenResponseParams>> Asyncnfs_open(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::OpenResponseParams>>(Asyncnfs_openRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::OpenResponseParams>> PrepareAsyncnfs_open(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::OpenResponseParams>>(PrepareAsyncnfs_openRaw(context, request, cq));
    }
    ::grpc::Status nfs_read(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::nfsFuse::ReadResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::ReadResponseParams>> Asyncnfs_read(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::ReadResponseParams>>(Asyncnfs_readRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::ReadResponseParams>> PrepareAsyncnfs_read(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::ReadResponseParams>>(PrepareAsyncnfs_readRaw(context, request, cq));
    }
    ::grpc::Status nfs_write(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::nfsFuse::WriteResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteResponseParams>> Asyncnfs_write(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteResponseParams>>(Asyncnfs_writeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteResponseParams>> PrepareAsyncnfs_write(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteResponseParams>>(PrepareAsyncnfs_writeRaw(context, request, cq));
    }
    ::grpc::Status nfs_commit(::grpc::ClientContext* context, const ::nfsFuse::CommitRequestParams& request, ::nfsFuse::CommitResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::CommitResponseParams>> Asyncnfs_commit(::grpc::ClientContext* context, const ::nfsFuse::CommitRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::CommitResponseParams>>(Asyncnfs_commitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::CommitResponseParams>> PrepareAsyncnfs_commit(::grpc::ClientContext* context, const ::nfsFuse::CommitRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::CommitResponseParams>>(PrepareAsyncnfs_commitRaw(context, request, cq));
    }
    ::grpc::Status nfs_recommit(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::nfsFuse::WriteResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteResponseParams>> Asyncnfs_recommit(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteResponseParams>>(Asyncnfs_recommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteResponseParams>> PrepareAsyncnfs_recommit(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteResponseParams>>(PrepareAsyncnfs_recommitRaw(context, request, cq));
    }
    ::grpc::Status nfs_unlink(::grpc::ClientContext* context, const ::nfsFuse::UnlinkRequestParams& request, ::nfsFuse::VoidMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>> Asyncnfs_unlink(::grpc::ClientContext* context, const ::nfsFuse::UnlinkRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>>(Asyncnfs_unlinkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>> PrepareAsyncnfs_unlink(::grpc::ClientContext* context, const ::nfsFuse::UnlinkRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>>(PrepareAsyncnfs_unlinkRaw(context, request, cq));
    }
    ::grpc::Status nfs_mknod(::grpc::ClientContext* context, const ::nfsFuse::MknodRequestParams& request, ::nfsFuse::VoidMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>> Asyncnfs_mknod(::grpc::ClientContext* context, const ::nfsFuse::MknodRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>>(Asyncnfs_mknodRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>> PrepareAsyncnfs_mknod(::grpc::ClientContext* context, const ::nfsFuse::MknodRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>>(PrepareAsyncnfs_mknodRaw(context, request, cq));
    }
    ::grpc::Status nfs_rename(::grpc::ClientContext* context, const ::nfsFuse::RenameRequestParams& request, ::nfsFuse::VoidMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>> Asyncnfs_rename(::grpc::ClientContext* context, const ::nfsFuse::RenameRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>>(Asyncnfs_renameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>> PrepareAsyncnfs_rename(::grpc::ClientContext* context, const ::nfsFuse::RenameRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>>(PrepareAsyncnfs_renameRaw(context, request, cq));
    }
    ::grpc::Status nfs_utimens(::grpc::ClientContext* context, const ::nfsFuse::UtimensRequestParams& request, ::nfsFuse::VoidMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>> Asyncnfs_utimens(::grpc::ClientContext* context, const ::nfsFuse::UtimensRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>>(Asyncnfs_utimensRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>> PrepareAsyncnfs_utimens(::grpc::ClientContext* context, const ::nfsFuse::UtimensRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>>(PrepareAsyncnfs_utimensRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void nfs_getattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response, std::function<void(::grpc::Status)>) override;
      void nfs_readdir(::grpc::ClientContext* context, ::nfsFuse::ReadDirRequestParams* request, ::grpc::experimental::ClientReadReactor< ::nfsFuse::ReadDirResponseParams>* reactor) override;
      void nfs_mkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)>) override;
      void nfs_rmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)>) override;
      void nfs_create(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response, std::function<void(::grpc::Status)>) override;
      void nfs_open(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response, std::function<void(::grpc::Status)>) override;
      void nfs_read(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response, std::function<void(::grpc::Status)>) override;
      void nfs_write(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response, std::function<void(::grpc::Status)>) override;
      void nfs_commit(::grpc::ClientContext* context, const ::nfsFuse::CommitRequestParams* request, ::nfsFuse::CommitResponseParams* response, std::function<void(::grpc::Status)>) override;
      void nfs_recommit(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response, std::function<void(::grpc::Status)>) override;
      void nfs_unlink(::grpc::ClientContext* context, const ::nfsFuse::UnlinkRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)>) override;
      void nfs_mknod(::grpc::ClientContext* context, const ::nfsFuse::MknodRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)>) override;
      void nfs_rename(::grpc::ClientContext* context, const ::nfsFuse::RenameRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)>) override;
      void nfs_utimens(::grpc::ClientContext* context, const ::nfsFuse::UtimensRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::GetAttrResponseParams>* Asyncnfs_getattrRaw(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::GetAttrResponseParams>* PrepareAsyncnfs_getattrRaw(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::nfsFuse::ReadDirResponseParams>* nfs_readdirRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request) override;
    ::grpc::ClientAsyncReader< ::nfsFuse::ReadDirResponseParams>* Asyncnfs_readdirRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::nfsFuse::ReadDirResponseParams>* PrepareAsyncnfs_readdirRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* Asyncnfs_mkdirRaw(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* PrepareAsyncnfs_mkdirRaw(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* Asyncnfs_rmdirRaw(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* PrepareAsyncnfs_rmdirRaw(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::CreateResponseParams>* Asyncnfs_createRaw(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::CreateResponseParams>* PrepareAsyncnfs_createRaw(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::OpenResponseParams>* Asyncnfs_openRaw(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::OpenResponseParams>* PrepareAsyncnfs_openRaw(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::ReadResponseParams>* Asyncnfs_readRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::ReadResponseParams>* PrepareAsyncnfs_readRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteResponseParams>* Asyncnfs_writeRaw(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteResponseParams>* PrepareAsyncnfs_writeRaw(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::CommitResponseParams>* Asyncnfs_commitRaw(::grpc::ClientContext* context, const ::nfsFuse::CommitRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::CommitResponseParams>* PrepareAsyncnfs_commitRaw(::grpc::ClientContext* context, const ::nfsFuse::CommitRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteResponseParams>* Asyncnfs_recommitRaw(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteResponseParams>* PrepareAsyncnfs_recommitRaw(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* Asyncnfs_unlinkRaw(::grpc::ClientContext* context, const ::nfsFuse::UnlinkRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* PrepareAsyncnfs_unlinkRaw(::grpc::ClientContext* context, const ::nfsFuse::UnlinkRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* Asyncnfs_mknodRaw(::grpc::ClientContext* context, const ::nfsFuse::MknodRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* PrepareAsyncnfs_mknodRaw(::grpc::ClientContext* context, const ::nfsFuse::MknodRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* Asyncnfs_renameRaw(::grpc::ClientContext* context, const ::nfsFuse::RenameRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* PrepareAsyncnfs_renameRaw(::grpc::ClientContext* context, const ::nfsFuse::RenameRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* Asyncnfs_utimensRaw(::grpc::ClientContext* context, const ::nfsFuse::UtimensRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* PrepareAsyncnfs_utimensRaw(::grpc::ClientContext* context, const ::nfsFuse::UtimensRequestParams& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_nfs_getattr_;
    const ::grpc::internal::RpcMethod rpcmethod_nfs_readdir_;
    const ::grpc::internal::RpcMethod rpcmethod_nfs_mkdir_;
    const ::grpc::internal::RpcMethod rpcmethod_nfs_rmdir_;
    const ::grpc::internal::RpcMethod rpcmethod_nfs_create_;
    const ::grpc::internal::RpcMethod rpcmethod_nfs_open_;
    const ::grpc::internal::RpcMethod rpcmethod_nfs_read_;
    const ::grpc::internal::RpcMethod rpcmethod_nfs_write_;
    const ::grpc::internal::RpcMethod rpcmethod_nfs_commit_;
    const ::grpc::internal::RpcMethod rpcmethod_nfs_recommit_;
    const ::grpc::internal::RpcMethod rpcmethod_nfs_unlink_;
    const ::grpc::internal::RpcMethod rpcmethod_nfs_mknod_;
    const ::grpc::internal::RpcMethod rpcmethod_nfs_rename_;
    const ::grpc::internal::RpcMethod rpcmethod_nfs_utimens_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status nfs_getattr(::grpc::ServerContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response);
    virtual ::grpc::Status nfs_readdir(::grpc::ServerContext* context, const ::nfsFuse::ReadDirRequestParams* request, ::grpc::ServerWriter< ::nfsFuse::ReadDirResponseParams>* writer);
    virtual ::grpc::Status nfs_mkdir(::grpc::ServerContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response);
    virtual ::grpc::Status nfs_rmdir(::grpc::ServerContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response);
    virtual ::grpc::Status nfs_create(::grpc::ServerContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response);
    virtual ::grpc::Status nfs_open(::grpc::ServerContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response);
    virtual ::grpc::Status nfs_read(::grpc::ServerContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response);
    virtual ::grpc::Status nfs_write(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response);
    virtual ::grpc::Status nfs_commit(::grpc::ServerContext* context, const ::nfsFuse::CommitRequestParams* request, ::nfsFuse::CommitResponseParams* response);
    virtual ::grpc::Status nfs_recommit(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response);
    virtual ::grpc::Status nfs_unlink(::grpc::ServerContext* context, const ::nfsFuse::UnlinkRequestParams* request, ::nfsFuse::VoidMessage* response);
    virtual ::grpc::Status nfs_mknod(::grpc::ServerContext* context, const ::nfsFuse::MknodRequestParams* request, ::nfsFuse::VoidMessage* response);
    virtual ::grpc::Status nfs_rename(::grpc::ServerContext* context, const ::nfsFuse::RenameRequestParams* request, ::nfsFuse::VoidMessage* response);
    virtual ::grpc::Status nfs_utimens(::grpc::ServerContext* context, const ::nfsFuse::UtimensRequestParams* request, ::nfsFuse::VoidMessage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_nfs_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfs_getattr() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_nfs_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_getattr(::grpc::ServerContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_getattr(::grpc::ServerContext* context, ::nfsFuse::GetAttrRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::GetAttrResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfs_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfs_readdir() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_nfs_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_readdir(::grpc::ServerContext* context, const ::nfsFuse::ReadDirRequestParams* request, ::grpc::ServerWriter< ::nfsFuse::ReadDirResponseParams>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_readdir(::grpc::ServerContext* context, ::nfsFuse::ReadDirRequestParams* request, ::grpc::ServerAsyncWriter< ::nfsFuse::ReadDirResponseParams>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfs_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfs_mkdir() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_nfs_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_mkdir(::grpc::ServerContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_mkdir(::grpc::ServerContext* context, ::nfsFuse::MkDirRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::VoidMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfs_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfs_rmdir() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_nfs_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_rmdir(::grpc::ServerContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_rmdir(::grpc::ServerContext* context, ::nfsFuse::RmDirRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::VoidMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfs_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfs_create() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_nfs_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_create(::grpc::ServerContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_create(::grpc::ServerContext* context, ::nfsFuse::CreateRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::CreateResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfs_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfs_open() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_nfs_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_open(::grpc::ServerContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_open(::grpc::ServerContext* context, ::nfsFuse::OpenRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::OpenResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfs_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfs_read() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_nfs_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_read(::grpc::ServerContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_read(::grpc::ServerContext* context, ::nfsFuse::ReadRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::ReadResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfs_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfs_write() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_nfs_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_write(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_write(::grpc::ServerContext* context, ::nfsFuse::WriteRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::WriteResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfs_commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfs_commit() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_nfs_commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_commit(::grpc::ServerContext* context, const ::nfsFuse::CommitRequestParams* request, ::nfsFuse::CommitResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_commit(::grpc::ServerContext* context, ::nfsFuse::CommitRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::CommitResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfs_recommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfs_recommit() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_nfs_recommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_recommit(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_recommit(::grpc::ServerContext* context, ::nfsFuse::WriteRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::WriteResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfs_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfs_unlink() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_nfs_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_unlink(::grpc::ServerContext* context, const ::nfsFuse::UnlinkRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_unlink(::grpc::ServerContext* context, ::nfsFuse::UnlinkRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::VoidMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfs_mknod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfs_mknod() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_nfs_mknod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_mknod(::grpc::ServerContext* context, const ::nfsFuse::MknodRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_mknod(::grpc::ServerContext* context, ::nfsFuse::MknodRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::VoidMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfs_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfs_rename() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_nfs_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_rename(::grpc::ServerContext* context, const ::nfsFuse::RenameRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_rename(::grpc::ServerContext* context, ::nfsFuse::RenameRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::VoidMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfs_utimens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfs_utimens() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_nfs_utimens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_utimens(::grpc::ServerContext* context, const ::nfsFuse::UtimensRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_utimens(::grpc::ServerContext* context, ::nfsFuse::UtimensRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::VoidMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_nfs_getattr<WithAsyncMethod_nfs_readdir<WithAsyncMethod_nfs_mkdir<WithAsyncMethod_nfs_rmdir<WithAsyncMethod_nfs_create<WithAsyncMethod_nfs_open<WithAsyncMethod_nfs_read<WithAsyncMethod_nfs_write<WithAsyncMethod_nfs_commit<WithAsyncMethod_nfs_recommit<WithAsyncMethod_nfs_unlink<WithAsyncMethod_nfs_mknod<WithAsyncMethod_nfs_rename<WithAsyncMethod_nfs_utimens<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_nfs_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_nfs_getattr() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::GetAttrRequestParams, ::nfsFuse::GetAttrResponseParams>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::GetAttrRequestParams* request,
                 ::nfsFuse::GetAttrResponseParams* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->nfs_getattr(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_nfs_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_getattr(::grpc::ServerContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_getattr(::grpc::ServerContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_nfs_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_nfs_readdir() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::nfsFuse::ReadDirRequestParams, ::nfsFuse::ReadDirResponseParams>(
          [this] { return this->nfs_readdir(); }));
    }
    ~ExperimentalWithCallbackMethod_nfs_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_readdir(::grpc::ServerContext* context, const ::nfsFuse::ReadDirRequestParams* request, ::grpc::ServerWriter< ::nfsFuse::ReadDirResponseParams>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::nfsFuse::ReadDirRequestParams, ::nfsFuse::ReadDirResponseParams>* nfs_readdir() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::nfsFuse::ReadDirRequestParams, ::nfsFuse::ReadDirResponseParams>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_nfs_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_nfs_mkdir() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::MkDirRequestParams, ::nfsFuse::VoidMessage>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::MkDirRequestParams* request,
                 ::nfsFuse::VoidMessage* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->nfs_mkdir(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_nfs_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_mkdir(::grpc::ServerContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_mkdir(::grpc::ServerContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_nfs_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_nfs_rmdir() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::RmDirRequestParams, ::nfsFuse::VoidMessage>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::RmDirRequestParams* request,
                 ::nfsFuse::VoidMessage* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->nfs_rmdir(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_nfs_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_rmdir(::grpc::ServerContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_rmdir(::grpc::ServerContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_nfs_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_nfs_create() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::CreateRequestParams, ::nfsFuse::CreateResponseParams>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::CreateRequestParams* request,
                 ::nfsFuse::CreateResponseParams* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->nfs_create(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_nfs_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_create(::grpc::ServerContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_create(::grpc::ServerContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_nfs_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_nfs_open() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::OpenRequestParams, ::nfsFuse::OpenResponseParams>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::OpenRequestParams* request,
                 ::nfsFuse::OpenResponseParams* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->nfs_open(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_nfs_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_open(::grpc::ServerContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_open(::grpc::ServerContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_nfs_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_nfs_read() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::ReadRequestParams, ::nfsFuse::ReadResponseParams>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::ReadRequestParams* request,
                 ::nfsFuse::ReadResponseParams* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->nfs_read(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_nfs_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_read(::grpc::ServerContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_read(::grpc::ServerContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_nfs_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_nfs_write() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::WriteRequestParams, ::nfsFuse::WriteResponseParams>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::WriteRequestParams* request,
                 ::nfsFuse::WriteResponseParams* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->nfs_write(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_nfs_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_write(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_write(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_nfs_commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_nfs_commit() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::CommitRequestParams, ::nfsFuse::CommitResponseParams>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::CommitRequestParams* request,
                 ::nfsFuse::CommitResponseParams* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->nfs_commit(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_nfs_commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_commit(::grpc::ServerContext* context, const ::nfsFuse::CommitRequestParams* request, ::nfsFuse::CommitResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_commit(::grpc::ServerContext* context, const ::nfsFuse::CommitRequestParams* request, ::nfsFuse::CommitResponseParams* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_nfs_recommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_nfs_recommit() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::WriteRequestParams, ::nfsFuse::WriteResponseParams>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::WriteRequestParams* request,
                 ::nfsFuse::WriteResponseParams* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->nfs_recommit(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_nfs_recommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_recommit(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_recommit(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_nfs_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_nfs_unlink() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::UnlinkRequestParams, ::nfsFuse::VoidMessage>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::UnlinkRequestParams* request,
                 ::nfsFuse::VoidMessage* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->nfs_unlink(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_nfs_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_unlink(::grpc::ServerContext* context, const ::nfsFuse::UnlinkRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_unlink(::grpc::ServerContext* context, const ::nfsFuse::UnlinkRequestParams* request, ::nfsFuse::VoidMessage* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_nfs_mknod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_nfs_mknod() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::MknodRequestParams, ::nfsFuse::VoidMessage>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::MknodRequestParams* request,
                 ::nfsFuse::VoidMessage* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->nfs_mknod(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_nfs_mknod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_mknod(::grpc::ServerContext* context, const ::nfsFuse::MknodRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_mknod(::grpc::ServerContext* context, const ::nfsFuse::MknodRequestParams* request, ::nfsFuse::VoidMessage* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_nfs_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_nfs_rename() {
      ::grpc::Service::experimental().MarkMethodCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::RenameRequestParams, ::nfsFuse::VoidMessage>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::RenameRequestParams* request,
                 ::nfsFuse::VoidMessage* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->nfs_rename(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_nfs_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_rename(::grpc::ServerContext* context, const ::nfsFuse::RenameRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_rename(::grpc::ServerContext* context, const ::nfsFuse::RenameRequestParams* request, ::nfsFuse::VoidMessage* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_nfs_utimens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_nfs_utimens() {
      ::grpc::Service::experimental().MarkMethodCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::UtimensRequestParams, ::nfsFuse::VoidMessage>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::UtimensRequestParams* request,
                 ::nfsFuse::VoidMessage* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->nfs_utimens(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_nfs_utimens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_utimens(::grpc::ServerContext* context, const ::nfsFuse::UtimensRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_utimens(::grpc::ServerContext* context, const ::nfsFuse::UtimensRequestParams* request, ::nfsFuse::VoidMessage* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_nfs_getattr<ExperimentalWithCallbackMethod_nfs_readdir<ExperimentalWithCallbackMethod_nfs_mkdir<ExperimentalWithCallbackMethod_nfs_rmdir<ExperimentalWithCallbackMethod_nfs_create<ExperimentalWithCallbackMethod_nfs_open<ExperimentalWithCallbackMethod_nfs_read<ExperimentalWithCallbackMethod_nfs_write<ExperimentalWithCallbackMethod_nfs_commit<ExperimentalWithCallbackMethod_nfs_recommit<ExperimentalWithCallbackMethod_nfs_unlink<ExperimentalWithCallbackMethod_nfs_mknod<ExperimentalWithCallbackMethod_nfs_rename<ExperimentalWithCallbackMethod_nfs_utimens<Service > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_nfs_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfs_getattr() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_nfs_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_getattr(::grpc::ServerContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfs_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfs_readdir() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_nfs_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_readdir(::grpc::ServerContext* context, const ::nfsFuse::ReadDirRequestParams* request, ::grpc::ServerWriter< ::nfsFuse::ReadDirResponseParams>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfs_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfs_mkdir() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_nfs_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_mkdir(::grpc::ServerContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfs_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfs_rmdir() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_nfs_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_rmdir(::grpc::ServerContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfs_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfs_create() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_nfs_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_create(::grpc::ServerContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfs_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfs_open() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_nfs_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_open(::grpc::ServerContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfs_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfs_read() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_nfs_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_read(::grpc::ServerContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfs_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfs_write() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_nfs_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_write(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfs_commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfs_commit() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_nfs_commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_commit(::grpc::ServerContext* context, const ::nfsFuse::CommitRequestParams* request, ::nfsFuse::CommitResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfs_recommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfs_recommit() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_nfs_recommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_recommit(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfs_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfs_unlink() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_nfs_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_unlink(::grpc::ServerContext* context, const ::nfsFuse::UnlinkRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfs_mknod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfs_mknod() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_nfs_mknod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_mknod(::grpc::ServerContext* context, const ::nfsFuse::MknodRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfs_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfs_rename() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_nfs_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_rename(::grpc::ServerContext* context, const ::nfsFuse::RenameRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfs_utimens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfs_utimens() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_nfs_utimens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_utimens(::grpc::ServerContext* context, const ::nfsFuse::UtimensRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_nfs_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_nfs_getattr() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_nfs_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_getattr(::grpc::ServerContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_getattr(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_nfs_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_nfs_readdir() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_nfs_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_readdir(::grpc::ServerContext* context, const ::nfsFuse::ReadDirRequestParams* request, ::grpc::ServerWriter< ::nfsFuse::ReadDirResponseParams>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_readdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_nfs_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_nfs_mkdir() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_nfs_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_mkdir(::grpc::ServerContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_mkdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_nfs_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_nfs_rmdir() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_nfs_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_rmdir(::grpc::ServerContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_rmdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_nfs_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_nfs_create() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_nfs_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_create(::grpc::ServerContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_create(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_nfs_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_nfs_open() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_nfs_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_open(::grpc::ServerContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_open(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_nfs_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_nfs_read() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_nfs_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_read(::grpc::ServerContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_read(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_nfs_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_nfs_write() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_nfs_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_write(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_write(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_nfs_commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_nfs_commit() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_nfs_commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_commit(::grpc::ServerContext* context, const ::nfsFuse::CommitRequestParams* request, ::nfsFuse::CommitResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_commit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_nfs_recommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_nfs_recommit() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_nfs_recommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_recommit(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_recommit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_nfs_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_nfs_unlink() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_nfs_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_unlink(::grpc::ServerContext* context, const ::nfsFuse::UnlinkRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_unlink(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_nfs_mknod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_nfs_mknod() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_nfs_mknod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_mknod(::grpc::ServerContext* context, const ::nfsFuse::MknodRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_mknod(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_nfs_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_nfs_rename() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_nfs_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_rename(::grpc::ServerContext* context, const ::nfsFuse::RenameRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_rename(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_nfs_utimens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_nfs_utimens() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_nfs_utimens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_utimens(::grpc::ServerContext* context, const ::nfsFuse::UtimensRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfs_utimens(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_nfs_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_nfs_getattr() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->nfs_getattr(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_nfs_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_getattr(::grpc::ServerContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_getattr(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_nfs_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_nfs_readdir() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->nfs_readdir(); }));
    }
    ~ExperimentalWithRawCallbackMethod_nfs_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_readdir(::grpc::ServerContext* context, const ::nfsFuse::ReadDirRequestParams* request, ::grpc::ServerWriter< ::nfsFuse::ReadDirResponseParams>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* nfs_readdir() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_nfs_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_nfs_mkdir() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->nfs_mkdir(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_nfs_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_mkdir(::grpc::ServerContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_mkdir(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_nfs_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_nfs_rmdir() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->nfs_rmdir(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_nfs_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_rmdir(::grpc::ServerContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_rmdir(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_nfs_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_nfs_create() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->nfs_create(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_nfs_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_create(::grpc::ServerContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_create(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_nfs_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_nfs_open() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->nfs_open(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_nfs_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_open(::grpc::ServerContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_open(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_nfs_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_nfs_read() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->nfs_read(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_nfs_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_read(::grpc::ServerContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_read(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_nfs_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_nfs_write() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->nfs_write(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_nfs_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_write(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_write(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_nfs_commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_nfs_commit() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->nfs_commit(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_nfs_commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_commit(::grpc::ServerContext* context, const ::nfsFuse::CommitRequestParams* request, ::nfsFuse::CommitResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_commit(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_nfs_recommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_nfs_recommit() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->nfs_recommit(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_nfs_recommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_recommit(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_recommit(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_nfs_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_nfs_unlink() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->nfs_unlink(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_nfs_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_unlink(::grpc::ServerContext* context, const ::nfsFuse::UnlinkRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_unlink(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_nfs_mknod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_nfs_mknod() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->nfs_mknod(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_nfs_mknod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_mknod(::grpc::ServerContext* context, const ::nfsFuse::MknodRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_mknod(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_nfs_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_nfs_rename() {
      ::grpc::Service::experimental().MarkMethodRawCallback(12,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->nfs_rename(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_nfs_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_rename(::grpc::ServerContext* context, const ::nfsFuse::RenameRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_rename(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_nfs_utimens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_nfs_utimens() {
      ::grpc::Service::experimental().MarkMethodRawCallback(13,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->nfs_utimens(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_nfs_utimens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfs_utimens(::grpc::ServerContext* context, const ::nfsFuse::UtimensRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void nfs_utimens(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_nfs_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_nfs_getattr() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::GetAttrRequestParams, ::nfsFuse::GetAttrResponseParams>(std::bind(&WithStreamedUnaryMethod_nfs_getattr<BaseClass>::Streamednfs_getattr, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_nfs_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nfs_getattr(::grpc::ServerContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamednfs_getattr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::GetAttrRequestParams,::nfsFuse::GetAttrResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_nfs_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_nfs_mkdir() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::MkDirRequestParams, ::nfsFuse::VoidMessage>(std::bind(&WithStreamedUnaryMethod_nfs_mkdir<BaseClass>::Streamednfs_mkdir, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_nfs_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nfs_mkdir(::grpc::ServerContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamednfs_mkdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::MkDirRequestParams,::nfsFuse::VoidMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_nfs_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_nfs_rmdir() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::RmDirRequestParams, ::nfsFuse::VoidMessage>(std::bind(&WithStreamedUnaryMethod_nfs_rmdir<BaseClass>::Streamednfs_rmdir, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_nfs_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nfs_rmdir(::grpc::ServerContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamednfs_rmdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::RmDirRequestParams,::nfsFuse::VoidMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_nfs_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_nfs_create() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::CreateRequestParams, ::nfsFuse::CreateResponseParams>(std::bind(&WithStreamedUnaryMethod_nfs_create<BaseClass>::Streamednfs_create, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_nfs_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nfs_create(::grpc::ServerContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamednfs_create(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::CreateRequestParams,::nfsFuse::CreateResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_nfs_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_nfs_open() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::OpenRequestParams, ::nfsFuse::OpenResponseParams>(std::bind(&WithStreamedUnaryMethod_nfs_open<BaseClass>::Streamednfs_open, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_nfs_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nfs_open(::grpc::ServerContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamednfs_open(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::OpenRequestParams,::nfsFuse::OpenResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_nfs_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_nfs_read() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::ReadRequestParams, ::nfsFuse::ReadResponseParams>(std::bind(&WithStreamedUnaryMethod_nfs_read<BaseClass>::Streamednfs_read, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_nfs_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nfs_read(::grpc::ServerContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamednfs_read(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::ReadRequestParams,::nfsFuse::ReadResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_nfs_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_nfs_write() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::WriteRequestParams, ::nfsFuse::WriteResponseParams>(std::bind(&WithStreamedUnaryMethod_nfs_write<BaseClass>::Streamednfs_write, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_nfs_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nfs_write(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamednfs_write(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::WriteRequestParams,::nfsFuse::WriteResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_nfs_commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_nfs_commit() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::CommitRequestParams, ::nfsFuse::CommitResponseParams>(std::bind(&WithStreamedUnaryMethod_nfs_commit<BaseClass>::Streamednfs_commit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_nfs_commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nfs_commit(::grpc::ServerContext* context, const ::nfsFuse::CommitRequestParams* request, ::nfsFuse::CommitResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamednfs_commit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::CommitRequestParams,::nfsFuse::CommitResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_nfs_recommit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_nfs_recommit() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::WriteRequestParams, ::nfsFuse::WriteResponseParams>(std::bind(&WithStreamedUnaryMethod_nfs_recommit<BaseClass>::Streamednfs_recommit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_nfs_recommit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nfs_recommit(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamednfs_recommit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::WriteRequestParams,::nfsFuse::WriteResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_nfs_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_nfs_unlink() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::UnlinkRequestParams, ::nfsFuse::VoidMessage>(std::bind(&WithStreamedUnaryMethod_nfs_unlink<BaseClass>::Streamednfs_unlink, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_nfs_unlink() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nfs_unlink(::grpc::ServerContext* context, const ::nfsFuse::UnlinkRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamednfs_unlink(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::UnlinkRequestParams,::nfsFuse::VoidMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_nfs_mknod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_nfs_mknod() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::MknodRequestParams, ::nfsFuse::VoidMessage>(std::bind(&WithStreamedUnaryMethod_nfs_mknod<BaseClass>::Streamednfs_mknod, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_nfs_mknod() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nfs_mknod(::grpc::ServerContext* context, const ::nfsFuse::MknodRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamednfs_mknod(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::MknodRequestParams,::nfsFuse::VoidMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_nfs_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_nfs_rename() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::RenameRequestParams, ::nfsFuse::VoidMessage>(std::bind(&WithStreamedUnaryMethod_nfs_rename<BaseClass>::Streamednfs_rename, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_nfs_rename() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nfs_rename(::grpc::ServerContext* context, const ::nfsFuse::RenameRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamednfs_rename(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::RenameRequestParams,::nfsFuse::VoidMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_nfs_utimens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_nfs_utimens() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::UtimensRequestParams, ::nfsFuse::VoidMessage>(std::bind(&WithStreamedUnaryMethod_nfs_utimens<BaseClass>::Streamednfs_utimens, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_nfs_utimens() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nfs_utimens(::grpc::ServerContext* context, const ::nfsFuse::UtimensRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamednfs_utimens(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::UtimensRequestParams,::nfsFuse::VoidMessage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_nfs_getattr<WithStreamedUnaryMethod_nfs_mkdir<WithStreamedUnaryMethod_nfs_rmdir<WithStreamedUnaryMethod_nfs_create<WithStreamedUnaryMethod_nfs_open<WithStreamedUnaryMethod_nfs_read<WithStreamedUnaryMethod_nfs_write<WithStreamedUnaryMethod_nfs_commit<WithStreamedUnaryMethod_nfs_recommit<WithStreamedUnaryMethod_nfs_unlink<WithStreamedUnaryMethod_nfs_mknod<WithStreamedUnaryMethod_nfs_rename<WithStreamedUnaryMethod_nfs_utimens<Service > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_nfs_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_nfs_readdir() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::nfsFuse::ReadDirRequestParams, ::nfsFuse::ReadDirResponseParams>(std::bind(&WithSplitStreamingMethod_nfs_readdir<BaseClass>::Streamednfs_readdir, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_nfs_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status nfs_readdir(::grpc::ServerContext* context, const ::nfsFuse::ReadDirRequestParams* request, ::grpc::ServerWriter< ::nfsFuse::ReadDirResponseParams>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamednfs_readdir(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::nfsFuse::ReadDirRequestParams,::nfsFuse::ReadDirResponseParams>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_nfs_readdir<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_nfs_getattr<WithSplitStreamingMethod_nfs_readdir<WithStreamedUnaryMethod_nfs_mkdir<WithStreamedUnaryMethod_nfs_rmdir<WithStreamedUnaryMethod_nfs_create<WithStreamedUnaryMethod_nfs_open<WithStreamedUnaryMethod_nfs_read<WithStreamedUnaryMethod_nfs_write<WithStreamedUnaryMethod_nfs_commit<WithStreamedUnaryMethod_nfs_recommit<WithStreamedUnaryMethod_nfs_unlink<WithStreamedUnaryMethod_nfs_mknod<WithStreamedUnaryMethod_nfs_rename<WithStreamedUnaryMethod_nfs_utimens<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace nfsFuse


#endif  // GRPC_nfsFuse_2eproto__INCLUDED
