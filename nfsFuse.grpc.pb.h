// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nfsFuse.proto
#ifndef GRPC_nfsFuse_2eproto__INCLUDED
#define GRPC_nfsFuse_2eproto__INCLUDED

#include "nfsFuse.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace nfsFuse {

// Interface exported by the server.
class NFSFuse final {
 public:
  static constexpr char const* service_full_name() {
    return "nfsFuse.NFSFuse";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::nfsFuse::GetAttrResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::GetAttrResponseParams>> Asyncgetattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::GetAttrResponseParams>>(AsyncgetattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::GetAttrResponseParams>> PrepareAsyncgetattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::GetAttrResponseParams>>(PrepareAsyncgetattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::nfsFuse::ReadDirResponseParams>> readdir(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::nfsFuse::ReadDirResponseParams>>(readdirRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::nfsFuse::ReadDirResponseParams>> Asyncreaddir(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::nfsFuse::ReadDirResponseParams>>(AsyncreaddirRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::nfsFuse::ReadDirResponseParams>> PrepareAsyncreaddir(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::nfsFuse::ReadDirResponseParams>>(PrepareAsyncreaddirRaw(context, request, cq));
    }
    virtual ::grpc::Status mkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::nfsFuse::VoidMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>> Asyncmkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>>(AsyncmkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>> PrepareAsyncmkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>>(PrepareAsyncmkdirRaw(context, request, cq));
    }
    virtual ::grpc::Status rmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::nfsFuse::VoidMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>> Asyncrmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>>(AsyncrmdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>> PrepareAsyncrmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>>(PrepareAsyncrmdirRaw(context, request, cq));
    }
    virtual ::grpc::Status create(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::nfsFuse::CreateResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CreateResponseParams>> Asynccreate(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CreateResponseParams>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CreateResponseParams>> PrepareAsynccreate(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CreateResponseParams>>(PrepareAsynccreateRaw(context, request, cq));
    }
    virtual ::grpc::Status open(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::nfsFuse::OpenResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::OpenResponseParams>> Asyncopen(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::OpenResponseParams>>(AsyncopenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::OpenResponseParams>> PrepareAsyncopen(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::OpenResponseParams>>(PrepareAsyncopenRaw(context, request, cq));
    }
    virtual ::grpc::Status read(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::nfsFuse::ReadResponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::ReadResponseParams>> Asyncread(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::ReadResponseParams>>(AsyncreadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::ReadResponseParams>> PrepareAsyncread(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::ReadResponseParams>>(PrepareAsyncreadRaw(context, request, cq));
    }
    virtual ::grpc::Status write(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::nfsFuse::WriteReponseParams* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteReponseParams>> Asyncwrite(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteReponseParams>>(AsyncwriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteReponseParams>> PrepareAsyncwrite(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteReponseParams>>(PrepareAsyncwriteRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void getattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void readdir(::grpc::ClientContext* context, ::nfsFuse::ReadDirRequestParams* request, ::grpc::experimental::ClientReadReactor< ::nfsFuse::ReadDirResponseParams>* reactor) = 0;
      virtual void mkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void rmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void create(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void open(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void read(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response, std::function<void(::grpc::Status)>) = 0;
      virtual void write(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteReponseParams* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::GetAttrResponseParams>* AsyncgetattrRaw(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::GetAttrResponseParams>* PrepareAsyncgetattrRaw(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::nfsFuse::ReadDirResponseParams>* readdirRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::nfsFuse::ReadDirResponseParams>* AsyncreaddirRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::nfsFuse::ReadDirResponseParams>* PrepareAsyncreaddirRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>* AsyncmkdirRaw(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>* PrepareAsyncmkdirRaw(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>* AsyncrmdirRaw(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::VoidMessage>* PrepareAsyncrmdirRaw(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CreateResponseParams>* AsynccreateRaw(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::CreateResponseParams>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::OpenResponseParams>* AsyncopenRaw(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::OpenResponseParams>* PrepareAsyncopenRaw(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::ReadResponseParams>* AsyncreadRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::ReadResponseParams>* PrepareAsyncreadRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteReponseParams>* AsyncwriteRaw(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsFuse::WriteReponseParams>* PrepareAsyncwriteRaw(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status getattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::nfsFuse::GetAttrResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::GetAttrResponseParams>> Asyncgetattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::GetAttrResponseParams>>(AsyncgetattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::GetAttrResponseParams>> PrepareAsyncgetattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::GetAttrResponseParams>>(PrepareAsyncgetattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::nfsFuse::ReadDirResponseParams>> readdir(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::nfsFuse::ReadDirResponseParams>>(readdirRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::nfsFuse::ReadDirResponseParams>> Asyncreaddir(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::nfsFuse::ReadDirResponseParams>>(AsyncreaddirRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::nfsFuse::ReadDirResponseParams>> PrepareAsyncreaddir(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::nfsFuse::ReadDirResponseParams>>(PrepareAsyncreaddirRaw(context, request, cq));
    }
    ::grpc::Status mkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::nfsFuse::VoidMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>> Asyncmkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>>(AsyncmkdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>> PrepareAsyncmkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>>(PrepareAsyncmkdirRaw(context, request, cq));
    }
    ::grpc::Status rmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::nfsFuse::VoidMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>> Asyncrmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>>(AsyncrmdirRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>> PrepareAsyncrmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>>(PrepareAsyncrmdirRaw(context, request, cq));
    }
    ::grpc::Status create(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::nfsFuse::CreateResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::CreateResponseParams>> Asynccreate(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::CreateResponseParams>>(AsynccreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::CreateResponseParams>> PrepareAsynccreate(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::CreateResponseParams>>(PrepareAsynccreateRaw(context, request, cq));
    }
    ::grpc::Status open(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::nfsFuse::OpenResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::OpenResponseParams>> Asyncopen(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::OpenResponseParams>>(AsyncopenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::OpenResponseParams>> PrepareAsyncopen(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::OpenResponseParams>>(PrepareAsyncopenRaw(context, request, cq));
    }
    ::grpc::Status read(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::nfsFuse::ReadResponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::ReadResponseParams>> Asyncread(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::ReadResponseParams>>(AsyncreadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::ReadResponseParams>> PrepareAsyncread(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::ReadResponseParams>>(PrepareAsyncreadRaw(context, request, cq));
    }
    ::grpc::Status write(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::nfsFuse::WriteReponseParams* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteReponseParams>> Asyncwrite(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteReponseParams>>(AsyncwriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteReponseParams>> PrepareAsyncwrite(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteReponseParams>>(PrepareAsyncwriteRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void getattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response, std::function<void(::grpc::Status)>) override;
      void readdir(::grpc::ClientContext* context, ::nfsFuse::ReadDirRequestParams* request, ::grpc::experimental::ClientReadReactor< ::nfsFuse::ReadDirResponseParams>* reactor) override;
      void mkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)>) override;
      void rmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)>) override;
      void create(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response, std::function<void(::grpc::Status)>) override;
      void open(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response, std::function<void(::grpc::Status)>) override;
      void read(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response, std::function<void(::grpc::Status)>) override;
      void write(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteReponseParams* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::GetAttrResponseParams>* AsyncgetattrRaw(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::GetAttrResponseParams>* PrepareAsyncgetattrRaw(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::nfsFuse::ReadDirResponseParams>* readdirRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request) override;
    ::grpc::ClientAsyncReader< ::nfsFuse::ReadDirResponseParams>* AsyncreaddirRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::nfsFuse::ReadDirResponseParams>* PrepareAsyncreaddirRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* AsyncmkdirRaw(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* PrepareAsyncmkdirRaw(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* AsyncrmdirRaw(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* PrepareAsyncrmdirRaw(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::CreateResponseParams>* AsynccreateRaw(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::CreateResponseParams>* PrepareAsynccreateRaw(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::OpenResponseParams>* AsyncopenRaw(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::OpenResponseParams>* PrepareAsyncopenRaw(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::ReadResponseParams>* AsyncreadRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::ReadResponseParams>* PrepareAsyncreadRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteReponseParams>* AsyncwriteRaw(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteReponseParams>* PrepareAsyncwriteRaw(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getattr_;
    const ::grpc::internal::RpcMethod rpcmethod_readdir_;
    const ::grpc::internal::RpcMethod rpcmethod_mkdir_;
    const ::grpc::internal::RpcMethod rpcmethod_rmdir_;
    const ::grpc::internal::RpcMethod rpcmethod_create_;
    const ::grpc::internal::RpcMethod rpcmethod_open_;
    const ::grpc::internal::RpcMethod rpcmethod_read_;
    const ::grpc::internal::RpcMethod rpcmethod_write_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getattr(::grpc::ServerContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response);
    virtual ::grpc::Status readdir(::grpc::ServerContext* context, const ::nfsFuse::ReadDirRequestParams* request, ::grpc::ServerWriter< ::nfsFuse::ReadDirResponseParams>* writer);
    virtual ::grpc::Status mkdir(::grpc::ServerContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response);
    virtual ::grpc::Status rmdir(::grpc::ServerContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response);
    virtual ::grpc::Status create(::grpc::ServerContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response);
    virtual ::grpc::Status open(::grpc::ServerContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response);
    virtual ::grpc::Status read(::grpc::ServerContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response);
    virtual ::grpc::Status write(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteReponseParams* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getattr() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getattr(::grpc::ServerContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestgetattr(::grpc::ServerContext* context, ::nfsFuse::GetAttrRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::GetAttrResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_readdir() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readdir(::grpc::ServerContext* context, const ::nfsFuse::ReadDirRequestParams* request, ::grpc::ServerWriter< ::nfsFuse::ReadDirResponseParams>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreaddir(::grpc::ServerContext* context, ::nfsFuse::ReadDirRequestParams* request, ::grpc::ServerAsyncWriter< ::nfsFuse::ReadDirResponseParams>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_mkdir() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status mkdir(::grpc::ServerContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmkdir(::grpc::ServerContext* context, ::nfsFuse::MkDirRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::VoidMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_rmdir() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rmdir(::grpc::ServerContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrmdir(::grpc::ServerContext* context, ::nfsFuse::RmDirRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::VoidMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_create() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::nfsFuse::CreateRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::CreateResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_open() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status open(::grpc::ServerContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestopen(::grpc::ServerContext* context, ::nfsFuse::OpenRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::OpenResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_read() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read(::grpc::ServerContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestread(::grpc::ServerContext* context, ::nfsFuse::ReadRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::ReadResponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_write() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteReponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwrite(::grpc::ServerContext* context, ::nfsFuse::WriteRequestParams* request, ::grpc::ServerAsyncResponseWriter< ::nfsFuse::WriteReponseParams>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getattr<WithAsyncMethod_readdir<WithAsyncMethod_mkdir<WithAsyncMethod_rmdir<WithAsyncMethod_create<WithAsyncMethod_open<WithAsyncMethod_read<WithAsyncMethod_write<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_getattr() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::GetAttrRequestParams, ::nfsFuse::GetAttrResponseParams>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::GetAttrRequestParams* request,
                 ::nfsFuse::GetAttrResponseParams* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->getattr(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getattr(::grpc::ServerContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getattr(::grpc::ServerContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_readdir() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::nfsFuse::ReadDirRequestParams, ::nfsFuse::ReadDirResponseParams>(
          [this] { return this->readdir(); }));
    }
    ~ExperimentalWithCallbackMethod_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readdir(::grpc::ServerContext* context, const ::nfsFuse::ReadDirRequestParams* request, ::grpc::ServerWriter< ::nfsFuse::ReadDirResponseParams>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::nfsFuse::ReadDirRequestParams, ::nfsFuse::ReadDirResponseParams>* readdir() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::nfsFuse::ReadDirRequestParams, ::nfsFuse::ReadDirResponseParams>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_mkdir() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::MkDirRequestParams, ::nfsFuse::VoidMessage>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::MkDirRequestParams* request,
                 ::nfsFuse::VoidMessage* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->mkdir(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status mkdir(::grpc::ServerContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void mkdir(::grpc::ServerContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_rmdir() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::RmDirRequestParams, ::nfsFuse::VoidMessage>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::RmDirRequestParams* request,
                 ::nfsFuse::VoidMessage* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->rmdir(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rmdir(::grpc::ServerContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void rmdir(::grpc::ServerContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_create() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::CreateRequestParams, ::nfsFuse::CreateResponseParams>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::CreateRequestParams* request,
                 ::nfsFuse::CreateResponseParams* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->create(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void create(::grpc::ServerContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_open() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::OpenRequestParams, ::nfsFuse::OpenResponseParams>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::OpenRequestParams* request,
                 ::nfsFuse::OpenResponseParams* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->open(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status open(::grpc::ServerContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void open(::grpc::ServerContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_read() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::ReadRequestParams, ::nfsFuse::ReadResponseParams>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::ReadRequestParams* request,
                 ::nfsFuse::ReadResponseParams* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->read(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read(::grpc::ServerContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void read(::grpc::ServerContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_write() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::nfsFuse::WriteRequestParams, ::nfsFuse::WriteReponseParams>(
          [this](::grpc::ServerContext* context,
                 const ::nfsFuse::WriteRequestParams* request,
                 ::nfsFuse::WriteReponseParams* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->write(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteReponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void write(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteReponseParams* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_getattr<ExperimentalWithCallbackMethod_readdir<ExperimentalWithCallbackMethod_mkdir<ExperimentalWithCallbackMethod_rmdir<ExperimentalWithCallbackMethod_create<ExperimentalWithCallbackMethod_open<ExperimentalWithCallbackMethod_read<ExperimentalWithCallbackMethod_write<Service > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getattr() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getattr(::grpc::ServerContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_readdir() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readdir(::grpc::ServerContext* context, const ::nfsFuse::ReadDirRequestParams* request, ::grpc::ServerWriter< ::nfsFuse::ReadDirResponseParams>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_mkdir() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status mkdir(::grpc::ServerContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_rmdir() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rmdir(::grpc::ServerContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_create() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_open() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status open(::grpc::ServerContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_read() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read(::grpc::ServerContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_write() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteReponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_getattr() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getattr(::grpc::ServerContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestgetattr(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_readdir() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readdir(::grpc::ServerContext* context, const ::nfsFuse::ReadDirRequestParams* request, ::grpc::ServerWriter< ::nfsFuse::ReadDirResponseParams>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestreaddir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_mkdir() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status mkdir(::grpc::ServerContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestmkdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_rmdir() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rmdir(::grpc::ServerContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrmdir(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_create() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_open() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status open(::grpc::ServerContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestopen(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_read() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read(::grpc::ServerContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestread(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_write() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteReponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestwrite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_getattr() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->getattr(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getattr(::grpc::ServerContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void getattr(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_readdir() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->readdir(); }));
    }
    ~ExperimentalWithRawCallbackMethod_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status readdir(::grpc::ServerContext* context, const ::nfsFuse::ReadDirRequestParams* request, ::grpc::ServerWriter< ::nfsFuse::ReadDirResponseParams>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* readdir() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_mkdir() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->mkdir(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status mkdir(::grpc::ServerContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void mkdir(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_rmdir() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->rmdir(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rmdir(::grpc::ServerContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void rmdir(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_create() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->create(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status create(::grpc::ServerContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void create(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_open() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->open(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status open(::grpc::ServerContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void open(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_read() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->read(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status read(::grpc::ServerContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void read(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_write() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->write(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status write(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteReponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void write(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getattr() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::GetAttrRequestParams, ::nfsFuse::GetAttrResponseParams>(std::bind(&WithStreamedUnaryMethod_getattr<BaseClass>::Streamedgetattr, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getattr() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getattr(::grpc::ServerContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedgetattr(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::GetAttrRequestParams,::nfsFuse::GetAttrResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_mkdir() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::MkDirRequestParams, ::nfsFuse::VoidMessage>(std::bind(&WithStreamedUnaryMethod_mkdir<BaseClass>::Streamedmkdir, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_mkdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status mkdir(::grpc::ServerContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedmkdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::MkDirRequestParams,::nfsFuse::VoidMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_rmdir() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::RmDirRequestParams, ::nfsFuse::VoidMessage>(std::bind(&WithStreamedUnaryMethod_rmdir<BaseClass>::Streamedrmdir, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_rmdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status rmdir(::grpc::ServerContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrmdir(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::RmDirRequestParams,::nfsFuse::VoidMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_create() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::CreateRequestParams, ::nfsFuse::CreateResponseParams>(std::bind(&WithStreamedUnaryMethod_create<BaseClass>::Streamedcreate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status create(::grpc::ServerContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::CreateRequestParams,::nfsFuse::CreateResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_open() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::OpenRequestParams, ::nfsFuse::OpenResponseParams>(std::bind(&WithStreamedUnaryMethod_open<BaseClass>::Streamedopen, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_open() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status open(::grpc::ServerContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedopen(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::OpenRequestParams,::nfsFuse::OpenResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_read() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::ReadRequestParams, ::nfsFuse::ReadResponseParams>(std::bind(&WithStreamedUnaryMethod_read<BaseClass>::Streamedread, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status read(::grpc::ServerContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedread(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::ReadRequestParams,::nfsFuse::ReadResponseParams>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_write() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::nfsFuse::WriteRequestParams, ::nfsFuse::WriteReponseParams>(std::bind(&WithStreamedUnaryMethod_write<BaseClass>::Streamedwrite, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status write(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteReponseParams* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedwrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nfsFuse::WriteRequestParams,::nfsFuse::WriteReponseParams>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getattr<WithStreamedUnaryMethod_mkdir<WithStreamedUnaryMethod_rmdir<WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_open<WithStreamedUnaryMethod_read<WithStreamedUnaryMethod_write<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_readdir() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::nfsFuse::ReadDirRequestParams, ::nfsFuse::ReadDirResponseParams>(std::bind(&WithSplitStreamingMethod_readdir<BaseClass>::Streamedreaddir, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_readdir() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status readdir(::grpc::ServerContext* context, const ::nfsFuse::ReadDirRequestParams* request, ::grpc::ServerWriter< ::nfsFuse::ReadDirResponseParams>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedreaddir(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::nfsFuse::ReadDirRequestParams,::nfsFuse::ReadDirResponseParams>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_readdir<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_getattr<WithSplitStreamingMethod_readdir<WithStreamedUnaryMethod_mkdir<WithStreamedUnaryMethod_rmdir<WithStreamedUnaryMethod_create<WithStreamedUnaryMethod_open<WithStreamedUnaryMethod_read<WithStreamedUnaryMethod_write<Service > > > > > > > > StreamedService;
};

}  // namespace nfsFuse


#endif  // GRPC_nfsFuse_2eproto__INCLUDED
