// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nfsFuse.proto

#include "nfsFuse.pb.h"
#include "nfsFuse.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace nfsFuse {

static const char* NFSFuse_method_names[] = {
  "/nfsFuse.NFSFuse/nfs_getattr",
  "/nfsFuse.NFSFuse/nfs_readdir",
  "/nfsFuse.NFSFuse/nfs_mkdir",
  "/nfsFuse.NFSFuse/nfs_rmdir",
  "/nfsFuse.NFSFuse/nfs_create",
  "/nfsFuse.NFSFuse/nfs_open",
  "/nfsFuse.NFSFuse/nfs_read",
  "/nfsFuse.NFSFuse/nfs_write",
  "/nfsFuse.NFSFuse/nfs_unlink",
  "/nfsFuse.NFSFuse/nfs_mknod",
  "/nfsFuse.NFSFuse/nfs_rename",
  "/nfsFuse.NFSFuse/nfs_utimens",
};

std::unique_ptr< NFSFuse::Stub> NFSFuse::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NFSFuse::Stub> stub(new NFSFuse::Stub(channel));
  return stub;
}

NFSFuse::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_nfs_getattr_(NFSFuse_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_nfs_readdir_(NFSFuse_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_nfs_mkdir_(NFSFuse_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_nfs_rmdir_(NFSFuse_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_nfs_create_(NFSFuse_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_nfs_open_(NFSFuse_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_nfs_read_(NFSFuse_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_nfs_write_(NFSFuse_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_nfs_unlink_(NFSFuse_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_nfs_mknod_(NFSFuse_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_nfs_rename_(NFSFuse_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_nfs_utimens_(NFSFuse_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NFSFuse::Stub::nfs_getattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::nfsFuse::GetAttrResponseParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_nfs_getattr_, context, request, response);
}

void NFSFuse::Stub::experimental_async::nfs_getattr(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_nfs_getattr_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::GetAttrResponseParams>* NFSFuse::Stub::Asyncnfs_getattrRaw(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::GetAttrResponseParams>::Create(channel_.get(), cq, rpcmethod_nfs_getattr_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::GetAttrResponseParams>* NFSFuse::Stub::PrepareAsyncnfs_getattrRaw(::grpc::ClientContext* context, const ::nfsFuse::GetAttrRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::GetAttrResponseParams>::Create(channel_.get(), cq, rpcmethod_nfs_getattr_, context, request, false);
}

::grpc::ClientReader< ::nfsFuse::ReadDirResponseParams>* NFSFuse::Stub::nfs_readdirRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request) {
  return ::grpc::internal::ClientReaderFactory< ::nfsFuse::ReadDirResponseParams>::Create(channel_.get(), rpcmethod_nfs_readdir_, context, request);
}

void NFSFuse::Stub::experimental_async::nfs_readdir(::grpc::ClientContext* context, ::nfsFuse::ReadDirRequestParams* request, ::grpc::experimental::ClientReadReactor< ::nfsFuse::ReadDirResponseParams>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::nfsFuse::ReadDirResponseParams>::Create(stub_->channel_.get(), stub_->rpcmethod_nfs_readdir_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::nfsFuse::ReadDirResponseParams>* NFSFuse::Stub::Asyncnfs_readdirRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::nfsFuse::ReadDirResponseParams>::Create(channel_.get(), cq, rpcmethod_nfs_readdir_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::nfsFuse::ReadDirResponseParams>* NFSFuse::Stub::PrepareAsyncnfs_readdirRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadDirRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::nfsFuse::ReadDirResponseParams>::Create(channel_.get(), cq, rpcmethod_nfs_readdir_, context, request, false, nullptr);
}

::grpc::Status NFSFuse::Stub::nfs_mkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::nfsFuse::VoidMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_nfs_mkdir_, context, request, response);
}

void NFSFuse::Stub::experimental_async::nfs_mkdir(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_nfs_mkdir_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* NFSFuse::Stub::Asyncnfs_mkdirRaw(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::VoidMessage>::Create(channel_.get(), cq, rpcmethod_nfs_mkdir_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* NFSFuse::Stub::PrepareAsyncnfs_mkdirRaw(::grpc::ClientContext* context, const ::nfsFuse::MkDirRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::VoidMessage>::Create(channel_.get(), cq, rpcmethod_nfs_mkdir_, context, request, false);
}

::grpc::Status NFSFuse::Stub::nfs_rmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::nfsFuse::VoidMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_nfs_rmdir_, context, request, response);
}

void NFSFuse::Stub::experimental_async::nfs_rmdir(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_nfs_rmdir_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* NFSFuse::Stub::Asyncnfs_rmdirRaw(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::VoidMessage>::Create(channel_.get(), cq, rpcmethod_nfs_rmdir_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* NFSFuse::Stub::PrepareAsyncnfs_rmdirRaw(::grpc::ClientContext* context, const ::nfsFuse::RmDirRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::VoidMessage>::Create(channel_.get(), cq, rpcmethod_nfs_rmdir_, context, request, false);
}

::grpc::Status NFSFuse::Stub::nfs_create(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::nfsFuse::CreateResponseParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_nfs_create_, context, request, response);
}

void NFSFuse::Stub::experimental_async::nfs_create(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_nfs_create_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::CreateResponseParams>* NFSFuse::Stub::Asyncnfs_createRaw(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::CreateResponseParams>::Create(channel_.get(), cq, rpcmethod_nfs_create_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::CreateResponseParams>* NFSFuse::Stub::PrepareAsyncnfs_createRaw(::grpc::ClientContext* context, const ::nfsFuse::CreateRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::CreateResponseParams>::Create(channel_.get(), cq, rpcmethod_nfs_create_, context, request, false);
}

::grpc::Status NFSFuse::Stub::nfs_open(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::nfsFuse::OpenResponseParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_nfs_open_, context, request, response);
}

void NFSFuse::Stub::experimental_async::nfs_open(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_nfs_open_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::OpenResponseParams>* NFSFuse::Stub::Asyncnfs_openRaw(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::OpenResponseParams>::Create(channel_.get(), cq, rpcmethod_nfs_open_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::OpenResponseParams>* NFSFuse::Stub::PrepareAsyncnfs_openRaw(::grpc::ClientContext* context, const ::nfsFuse::OpenRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::OpenResponseParams>::Create(channel_.get(), cq, rpcmethod_nfs_open_, context, request, false);
}

::grpc::Status NFSFuse::Stub::nfs_read(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::nfsFuse::ReadResponseParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_nfs_read_, context, request, response);
}

void NFSFuse::Stub::experimental_async::nfs_read(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_nfs_read_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::ReadResponseParams>* NFSFuse::Stub::Asyncnfs_readRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::ReadResponseParams>::Create(channel_.get(), cq, rpcmethod_nfs_read_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::ReadResponseParams>* NFSFuse::Stub::PrepareAsyncnfs_readRaw(::grpc::ClientContext* context, const ::nfsFuse::ReadRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::ReadResponseParams>::Create(channel_.get(), cq, rpcmethod_nfs_read_, context, request, false);
}

::grpc::Status NFSFuse::Stub::nfs_write(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::nfsFuse::WriteResponseParams* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_nfs_write_, context, request, response);
}

void NFSFuse::Stub::experimental_async::nfs_write(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_nfs_write_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteResponseParams>* NFSFuse::Stub::Asyncnfs_writeRaw(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::WriteResponseParams>::Create(channel_.get(), cq, rpcmethod_nfs_write_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::WriteResponseParams>* NFSFuse::Stub::PrepareAsyncnfs_writeRaw(::grpc::ClientContext* context, const ::nfsFuse::WriteRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::WriteResponseParams>::Create(channel_.get(), cq, rpcmethod_nfs_write_, context, request, false);
}

::grpc::Status NFSFuse::Stub::nfs_unlink(::grpc::ClientContext* context, const ::nfsFuse::UnlinkRequestParams& request, ::nfsFuse::VoidMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_nfs_unlink_, context, request, response);
}

void NFSFuse::Stub::experimental_async::nfs_unlink(::grpc::ClientContext* context, const ::nfsFuse::UnlinkRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_nfs_unlink_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* NFSFuse::Stub::Asyncnfs_unlinkRaw(::grpc::ClientContext* context, const ::nfsFuse::UnlinkRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::VoidMessage>::Create(channel_.get(), cq, rpcmethod_nfs_unlink_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* NFSFuse::Stub::PrepareAsyncnfs_unlinkRaw(::grpc::ClientContext* context, const ::nfsFuse::UnlinkRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::VoidMessage>::Create(channel_.get(), cq, rpcmethod_nfs_unlink_, context, request, false);
}

::grpc::Status NFSFuse::Stub::nfs_mknod(::grpc::ClientContext* context, const ::nfsFuse::MknodRequestParams& request, ::nfsFuse::VoidMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_nfs_mknod_, context, request, response);
}

void NFSFuse::Stub::experimental_async::nfs_mknod(::grpc::ClientContext* context, const ::nfsFuse::MknodRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_nfs_mknod_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* NFSFuse::Stub::Asyncnfs_mknodRaw(::grpc::ClientContext* context, const ::nfsFuse::MknodRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::VoidMessage>::Create(channel_.get(), cq, rpcmethod_nfs_mknod_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* NFSFuse::Stub::PrepareAsyncnfs_mknodRaw(::grpc::ClientContext* context, const ::nfsFuse::MknodRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::VoidMessage>::Create(channel_.get(), cq, rpcmethod_nfs_mknod_, context, request, false);
}

::grpc::Status NFSFuse::Stub::nfs_rename(::grpc::ClientContext* context, const ::nfsFuse::RenameRequestParams& request, ::nfsFuse::VoidMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_nfs_rename_, context, request, response);
}

void NFSFuse::Stub::experimental_async::nfs_rename(::grpc::ClientContext* context, const ::nfsFuse::RenameRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_nfs_rename_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* NFSFuse::Stub::Asyncnfs_renameRaw(::grpc::ClientContext* context, const ::nfsFuse::RenameRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::VoidMessage>::Create(channel_.get(), cq, rpcmethod_nfs_rename_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* NFSFuse::Stub::PrepareAsyncnfs_renameRaw(::grpc::ClientContext* context, const ::nfsFuse::RenameRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::VoidMessage>::Create(channel_.get(), cq, rpcmethod_nfs_rename_, context, request, false);
}

::grpc::Status NFSFuse::Stub::nfs_utimens(::grpc::ClientContext* context, const ::nfsFuse::UtimensRequestParams& request, ::nfsFuse::VoidMessage* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_nfs_utimens_, context, request, response);
}

void NFSFuse::Stub::experimental_async::nfs_utimens(::grpc::ClientContext* context, const ::nfsFuse::UtimensRequestParams* request, ::nfsFuse::VoidMessage* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_nfs_utimens_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* NFSFuse::Stub::Asyncnfs_utimensRaw(::grpc::ClientContext* context, const ::nfsFuse::UtimensRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::VoidMessage>::Create(channel_.get(), cq, rpcmethod_nfs_utimens_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::nfsFuse::VoidMessage>* NFSFuse::Stub::PrepareAsyncnfs_utimensRaw(::grpc::ClientContext* context, const ::nfsFuse::UtimensRequestParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::nfsFuse::VoidMessage>::Create(channel_.get(), cq, rpcmethod_nfs_utimens_, context, request, false);
}

NFSFuse::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NFSFuse_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NFSFuse::Service, ::nfsFuse::GetAttrRequestParams, ::nfsFuse::GetAttrResponseParams>(
          std::mem_fn(&NFSFuse::Service::nfs_getattr), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NFSFuse_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< NFSFuse::Service, ::nfsFuse::ReadDirRequestParams, ::nfsFuse::ReadDirResponseParams>(
          std::mem_fn(&NFSFuse::Service::nfs_readdir), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NFSFuse_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NFSFuse::Service, ::nfsFuse::MkDirRequestParams, ::nfsFuse::VoidMessage>(
          std::mem_fn(&NFSFuse::Service::nfs_mkdir), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NFSFuse_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NFSFuse::Service, ::nfsFuse::RmDirRequestParams, ::nfsFuse::VoidMessage>(
          std::mem_fn(&NFSFuse::Service::nfs_rmdir), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NFSFuse_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NFSFuse::Service, ::nfsFuse::CreateRequestParams, ::nfsFuse::CreateResponseParams>(
          std::mem_fn(&NFSFuse::Service::nfs_create), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NFSFuse_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NFSFuse::Service, ::nfsFuse::OpenRequestParams, ::nfsFuse::OpenResponseParams>(
          std::mem_fn(&NFSFuse::Service::nfs_open), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NFSFuse_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NFSFuse::Service, ::nfsFuse::ReadRequestParams, ::nfsFuse::ReadResponseParams>(
          std::mem_fn(&NFSFuse::Service::nfs_read), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NFSFuse_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NFSFuse::Service, ::nfsFuse::WriteRequestParams, ::nfsFuse::WriteResponseParams>(
          std::mem_fn(&NFSFuse::Service::nfs_write), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NFSFuse_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NFSFuse::Service, ::nfsFuse::UnlinkRequestParams, ::nfsFuse::VoidMessage>(
          std::mem_fn(&NFSFuse::Service::nfs_unlink), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NFSFuse_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NFSFuse::Service, ::nfsFuse::MknodRequestParams, ::nfsFuse::VoidMessage>(
          std::mem_fn(&NFSFuse::Service::nfs_mknod), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NFSFuse_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NFSFuse::Service, ::nfsFuse::RenameRequestParams, ::nfsFuse::VoidMessage>(
          std::mem_fn(&NFSFuse::Service::nfs_rename), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NFSFuse_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NFSFuse::Service, ::nfsFuse::UtimensRequestParams, ::nfsFuse::VoidMessage>(
          std::mem_fn(&NFSFuse::Service::nfs_utimens), this)));
}

NFSFuse::Service::~Service() {
}

::grpc::Status NFSFuse::Service::nfs_getattr(::grpc::ServerContext* context, const ::nfsFuse::GetAttrRequestParams* request, ::nfsFuse::GetAttrResponseParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFSFuse::Service::nfs_readdir(::grpc::ServerContext* context, const ::nfsFuse::ReadDirRequestParams* request, ::grpc::ServerWriter< ::nfsFuse::ReadDirResponseParams>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFSFuse::Service::nfs_mkdir(::grpc::ServerContext* context, const ::nfsFuse::MkDirRequestParams* request, ::nfsFuse::VoidMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFSFuse::Service::nfs_rmdir(::grpc::ServerContext* context, const ::nfsFuse::RmDirRequestParams* request, ::nfsFuse::VoidMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFSFuse::Service::nfs_create(::grpc::ServerContext* context, const ::nfsFuse::CreateRequestParams* request, ::nfsFuse::CreateResponseParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFSFuse::Service::nfs_open(::grpc::ServerContext* context, const ::nfsFuse::OpenRequestParams* request, ::nfsFuse::OpenResponseParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFSFuse::Service::nfs_read(::grpc::ServerContext* context, const ::nfsFuse::ReadRequestParams* request, ::nfsFuse::ReadResponseParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFSFuse::Service::nfs_write(::grpc::ServerContext* context, const ::nfsFuse::WriteRequestParams* request, ::nfsFuse::WriteResponseParams* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFSFuse::Service::nfs_unlink(::grpc::ServerContext* context, const ::nfsFuse::UnlinkRequestParams* request, ::nfsFuse::VoidMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFSFuse::Service::nfs_mknod(::grpc::ServerContext* context, const ::nfsFuse::MknodRequestParams* request, ::nfsFuse::VoidMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFSFuse::Service::nfs_rename(::grpc::ServerContext* context, const ::nfsFuse::RenameRequestParams* request, ::nfsFuse::VoidMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFSFuse::Service::nfs_utimens(::grpc::ServerContext* context, const ::nfsFuse::UtimensRequestParams* request, ::nfsFuse::VoidMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nfsFuse

